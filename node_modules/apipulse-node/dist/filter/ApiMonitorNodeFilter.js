"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var AgentConfig_1 = __importDefault(require("../common/data/AgentConfig"));
var ObservedApi_1 = __importDefault(require("../common/data/ObservedApi"));
var RequestResponseContext_1 = __importDefault(require("./RequestResponseContext"));
var ApiBufferKey_1 = __importDefault(require("../buffer/ApiBufferKey"));
var SDKLogger_1 = __importDefault(require("../SDKLogger"));
var ApiMonitorNodeFilter = /** @class */ (function () {
    function ApiMonitorNodeFilter(configManager, apiProcessor, userApplicationName) {
        this.configManager = configManager;
        this.apiProcessor = apiProcessor;
        this.userApplicationName = userApplicationName;
    }
    ApiMonitorNodeFilter.prototype.init = function () {
        try {
            this.configManager.subscribeToUpdates(this);
            return true;
        }
        catch (error) {
            SDKLogger_1.default.error("Error in ApiMonitorNodeFilter::init - ".concat(error));
            return false;
        }
    };
    ApiMonitorNodeFilter.prototype.onErroneousConfigUpdate = function () {
        this.agentConfig = AgentConfig_1.default.noOpAgentConfig;
    };
    ApiMonitorNodeFilter.prototype.onSuccessfulConfigUpdate = function (agentConfig) {
        this.agentConfig = agentConfig;
    };
    ApiMonitorNodeFilter.prototype.getApiConfig = function (observedApi, agentConfig) {
        var _a;
        if (!this.agentConfig || !((_a = this.agentConfig.getRegisteredApiConfigs()) === null || _a === void 0 ? void 0 : _a.length)) {
            return null;
        }
        var registeredApis = this.agentConfig.getRegisteredApiConfigs();
        for (var i = 0; i < registeredApis.length; i++) {
            if (observedApi.matches(registeredApis[i])) {
                return registeredApis[i];
            }
        }
        return null;
    };
    ApiMonitorNodeFilter.prototype.getObservedApiFromRequest = function (request) {
        var method = request.getMethod();
        return new ObservedApi_1.default(request.getRawUri(), method);
    };
    ApiMonitorNodeFilter.prototype.processReqAndRes = function (req, res, next, getHttpRequest, framework, maskHeaders) {
        //console.log("processing req and response");
        try {
            var agentConfigLocal = this.agentConfig;
            if (!agentConfigLocal) {
                SDKLogger_1.default.log("ApiMonitorNodeFilter::processReqAndRes config not found");
                next();
                return;
            }
            if (!agentConfigLocal.getCaptureApiSample()) {
                SDKLogger_1.default.log("ApiMonitorNodeFilter::processReqAndRes getCaptureApiSample == false");
                next();
                return;
            }
            var queryParams = null;
            if (req.query) {
                queryParams = Object.assign({}, req.query);
            }
            if (queryParams && Object.keys(queryParams).length > 0) {
                for (var key in queryParams) {
                    if (!Array.isArray(queryParams[key])) {
                        queryParams[key] = [queryParams[key]];
                    }
                }
            }
            var request = getHttpRequest(req, queryParams);
            var observedApi = this.getObservedApiFromRequest(request);
            if (this.isBlackListedApi(observedApi, agentConfigLocal)) {
                SDKLogger_1.default.log("ApiMonitorNodeFilter::processReqAndRes blacklistedApi");
                next();
                return;
            }
            var context = new RequestResponseContext_1.default(request, this.userApplicationName);
            context.setObservedApi(observedApi);
            var apiConfig = this.getApiConfig(observedApi, agentConfigLocal);
            context.setAgentConfig(agentConfigLocal);
            if (apiConfig) {
                context.setApiConfig(apiConfig);
                context.setApiBufferKey(ApiBufferKey_1.default.getApiBufferKeyFromApiConfig(apiConfig));
                this.apiProcessor.processRegisteredApi(context, req, res, next, framework, maskHeaders);
            }
            else {
                context.setApiBufferKey(ApiBufferKey_1.default.getApiBufferKeyFromObservedApi(observedApi));
                this.apiProcessor.processDiscoveredApi(context, res, next, framework, maskHeaders);
            }
        }
        catch (error) {
            SDKLogger_1.default.error("Error in ApiMonitorNodeFilter::processReqAndRes - ".concat(error));
            next();
        }
    };
    ApiMonitorNodeFilter.prototype.isBlackListedApi = function (observedApi, agentConfig) {
        //console.log("checking black listed");
        // Log the observedApi and agentConfig details
        //console.log("Observed API:", JSON.stringify(observedApi, null, 2));
        //console.log("Agent Config:", JSON.stringify(agentConfig, null, 2));
        try {
            if (!agentConfig || !agentConfig.getBlackListRules()) {
                return false;
            }
            var blackListRules = agentConfig.getBlackListRules();
            // Log the blackListRules
            //console.log("Blacklist Rules:", JSON.stringify(blackListRules, null, 2));
            for (var i = 0; i < blackListRules.length; i++) {
                // Log the current blacklist rule and the observed API it is being compared against
                //console.log(`Checking blacklist rule ${i}:`, JSON.stringify(blackListRules[i], null, 2));
                //console.log("Against Observed API:", JSON.stringify(observedApi, null, 2));
                if (blackListRules[i].matchesUri(observedApi.getUri(), observedApi.getMethod())) {
                    //console.log("API is blacklisted.");
                    return true;
                }
            }
            //console.log("API is not blacklisted.");
            return false;
        }
        catch (e) {
            SDKLogger_1.default.error("Error in ApiMonitorNodeFilter::isBlackListedApi - ".concat(e));
            return false;
        }
    };
    return ApiMonitorNodeFilter;
}());
exports.default = ApiMonitorNodeFilter;
