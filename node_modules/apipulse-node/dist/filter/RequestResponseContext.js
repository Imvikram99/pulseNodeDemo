"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RequestResponseContext = /** @class */ (function () {
    function RequestResponseContext(request, applicationName) {
        this.request = request;
        this.applicationName = applicationName;
        this.requestPayloadCaptureAttempted = false;
        this.responsePayloadCaptureAttempted = false;
        this.payloadCaptureAttempted = false;
        this.latency = 0;
    }
    RequestResponseContext.prototype.getRequest = function () {
        return this.request;
    };
    RequestResponseContext.prototype.getResponse = function () {
        return this.response;
    };
    RequestResponseContext.prototype.setResponse = function (response) {
        this.response = response;
    };
    RequestResponseContext.prototype.getApplicationName = function () {
        return this.applicationName;
    };
    RequestResponseContext.prototype.getObservedApi = function () {
        return this.observedApi;
    };
    RequestResponseContext.prototype.setObservedApi = function (observedApi) {
        this.observedApi = observedApi;
    };
    RequestResponseContext.prototype.getApiConfig = function () {
        return this.apiConfig;
    };
    RequestResponseContext.prototype.setApiConfig = function (apiConfig) {
        this.apiConfig = apiConfig;
    };
    RequestResponseContext.prototype.getAgentConfig = function () {
        return this.agentConfig;
    };
    RequestResponseContext.prototype.setAgentConfig = function (agentConfig) {
        this.agentConfig = agentConfig;
    };
    RequestResponseContext.prototype.getApiBufferKey = function () {
        return this.apiBufferKey;
    };
    RequestResponseContext.prototype.setApiBufferKey = function (apiBufferKey) {
        this.apiBufferKey = apiBufferKey;
    };
    RequestResponseContext.prototype.isRequestPayloadCaptureAttempted = function () {
        return this.requestPayloadCaptureAttempted;
    };
    RequestResponseContext.prototype.setRequestPayloadCaptureAttempted = function (requestPayloadCaptureAttempted) {
        this.requestPayloadCaptureAttempted = requestPayloadCaptureAttempted;
    };
    RequestResponseContext.prototype.isResponsePayloadCaptureAttempted = function () {
        return this.responsePayloadCaptureAttempted;
    };
    RequestResponseContext.prototype.setResponsePayloadCaptureAttempted = function (responsePayloadCaptureAttempted) {
        this.responsePayloadCaptureAttempted = responsePayloadCaptureAttempted;
    };
    RequestResponseContext.prototype.isPayloadCaptureAttempted = function () {
        return this.payloadCaptureAttempted;
    };
    RequestResponseContext.prototype.setPayloadCaptureAttempted = function (payloadCaptureAttempted) {
        this.payloadCaptureAttempted = payloadCaptureAttempted;
    };
    RequestResponseContext.prototype.getLatency = function () {
        return this.latency;
    };
    RequestResponseContext.prototype.setLatency = function (latency) {
        this.latency = latency;
    };
    return RequestResponseContext;
}());
exports.default = RequestResponseContext;
