"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var APISample_1 = __importDefault(require("../common/data/APISample"));
var HttpResponse_1 = __importDefault(require("./HttpResponse"));
var SDKLogger_1 = __importDefault(require("../SDKLogger"));
var MaskingUtils_1 = __importDefault(require("../common/utils/MaskingUtils"));
var ApiMonitorCommonConstant_1 = require("../common/constant/ApiMonitorCommonConstant");
var ApiProcessor = /** @class */ (function () {
    function ApiProcessor(registeredApiBufferManager, discoveredApiBufferManager) {
        this.registeredApiBufferManager = registeredApiBufferManager;
        this.discoveredApiBufferManager = discoveredApiBufferManager;
    }
    ApiProcessor.prototype.processDiscoveredApi = function (context, res, next, framework, maskHeaders) {
        var _this = this;
        SDKLogger_1.default.log("ApiProcessor::processDiscoveredApi");
        var worker = this.discoveredApiBufferManager.getWorker();
        if (!worker) {
            next();
            return;
        }
        var apiBufferKey = context.getApiBufferKey();
        if (apiBufferKey === undefined) {
            SDKLogger_1.default.error("ApiBufferKey is undefined");
            next();
            return;
        }
        var canOffer = worker.canOffer(apiBufferKey);
        context.setPayloadCaptureAttempted(false);
        // Existing implementation for EXPRESS framework
        if (framework === ApiMonitorCommonConstant_1.Framework.EXPRESS) {
            var call = function () { return __awaiter(_this, void 0, void 0, function () {
                var _end;
                return __generator(this, function (_a) {
                    _end = res.end;
                    res.end = function (chunk) {
                        context.setResponse(new HttpResponse_1.default(MaskingUtils_1.default.getReplacedHeaders(res.getHeaders(), maskHeaders), res.statusCode));
                        _end.apply(res, arguments);
                    };
                    next();
                    return [2 /*return*/];
                });
            }); };
            call().then(function () {
                if (canOffer && worker) {
                    _this.tryOffering(context, worker);
                }
            });
        }
        // Existing implementation for HAPI framework
        else if (framework === ApiMonitorCommonConstant_1.Framework.HAPI) {
            if (res && res.events) {
                res.events.on("finish", function () {
                    if (canOffer) {
                        context.setResponse(new HttpResponse_1.default(MaskingUtils_1.default.getReplacedHeaders(res.headers, maskHeaders), res.statusCode));
                    }
                    if (canOffer && worker) {
                        _this.tryOffering(context, worker);
                    }
                });
            }
            next();
        }
        else {
            SDKLogger_1.default.log("ApiProcessor::processDiscoveredApi unknown framework");
            next();
        }
    };
    ApiProcessor.prototype.processRegisteredApi = function (context, req, res, next, framework, maskHeaders) {
        var _this = this;
        SDKLogger_1.default.log("ApiProcessor::processRegisteredApi");
        var worker = this.registeredApiBufferManager.getWorker();
        if (!worker) {
            next();
            return;
        }
        context.setPayloadCaptureAttempted(true);
        var apiBufferKey = context.getApiBufferKey();
        if (apiBufferKey === undefined) {
            SDKLogger_1.default.error("ApiBufferKey is undefined");
            next();
            return;
        }
        var canOffer = worker.canOffer(apiBufferKey);
        var requestPayloadCaptureAttempted = false;
        var responsePayloadCaptureAttempted = false;
        if (!canOffer) {
            SDKLogger_1.default.log("ApiProcessor::processRegisteredApi canOffer == false");
            next();
            return;
        }
        requestPayloadCaptureAttempted = this.shouldCaptureRequest(context);
        if (requestPayloadCaptureAttempted) {
            var payload = void 0;
            if (framework === ApiMonitorCommonConstant_1.Framework.EXPRESS) {
                payload = req.body;
            }
            else if (framework === ApiMonitorCommonConstant_1.Framework.HAPI) {
                payload = req.payload;
            }
            try {
                if (typeof payload === "object") {
                    context.getRequest().setBody(JSON.stringify(payload));
                }
                else {
                    context.getRequest().setBody(payload);
                }
            }
            catch (err) {
                SDKLogger_1.default.error("reading request body: ".concat(err));
            }
        }
        var startTime = Date.now();
        responsePayloadCaptureAttempted = this.shouldCaptureResponse(context);
        context.setRequestPayloadCaptureAttempted(requestPayloadCaptureAttempted);
        context.setResponsePayloadCaptureAttempted(responsePayloadCaptureAttempted);
        // Existing implementation for EXPRESS framework
        if (framework === ApiMonitorCommonConstant_1.Framework.EXPRESS) {
            var _end_1 = res.end;
            var _write_1 = res.write;
            var chunks_1 = [];
            res.write = function (chunk) {
                if (responsePayloadCaptureAttempted) {
                    if (chunk)
                        chunks_1.push(chunk);
                }
                _write_1.apply(res, arguments);
            };
            var call = function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    res.end = function (chunk) {
                        var _a;
                        try {
                            if (responsePayloadCaptureAttempted) {
                                if (chunk)
                                    chunks_1.push(chunk);
                            }
                            context.setResponse(new HttpResponse_1.default(MaskingUtils_1.default.getReplacedHeaders(res.getHeaders(), maskHeaders), res.statusCode));
                            context.setLatency(Date.now() - startTime);
                            if (responsePayloadCaptureAttempted) {
                                var body = Buffer.concat(chunks_1).toString("utf8");
                                (_a = context.getResponse()) === null || _a === void 0 ? void 0 : _a.setBody(body);
                            }
                        }
                        catch (err) {
                            SDKLogger_1.default.error("reading response body of captured api: ".concat(err));
                        }
                        _end_1.apply(res, arguments);
                    };
                    next();
                    return [2 /*return*/];
                });
            }); };
            call().then(function () {
                if (canOffer && worker) {
                    _this.tryOffering(context, worker);
                }
            });
        }
        // Existing implementation for HAPI framework
        else if (framework === ApiMonitorCommonConstant_1.Framework.HAPI) {
            if (res && res.events) {
                res.events.on("finish", function () {
                    var _a, _b;
                    if (canOffer) {
                        context.setResponse(new HttpResponse_1.default(MaskingUtils_1.default.getReplacedHeaders(res.headers, maskHeaders), res.statusCode));
                        context.setLatency(Date.now() - startTime);
                        if (responsePayloadCaptureAttempted) {
                            var payload = res.source;
                            if (typeof payload === "object") {
                                (_a = context
                                    .getResponse()) === null || _a === void 0 ? void 0 : _a.setBody(JSON.stringify(payload));
                            }
                            else {
                                (_b = context.getResponse()) === null || _b === void 0 ? void 0 : _b.setBody(payload);
                            }
                        }
                    }
                    if (canOffer && worker) {
                        _this.tryOffering(context, worker);
                    }
                });
            }
            next();
        }
        else {
            SDKLogger_1.default.log("ApiProcessor::processRegisteredApi unknown framework");
            next();
        }
    };
    ApiProcessor.prototype.tryOffering = function (context, worker) {
        try {
            SDKLogger_1.default.log("ApiProcessor::tryOffering");
            var apiSample = this.getBufferEntryForApiSample(context);
            worker.offer(context.getApiBufferKey(), apiSample);
        }
        catch (e) {
            SDKLogger_1.default.error("while offering api sample to buffer: ".concat(e));
        }
    };
    ApiProcessor.prototype.shouldCaptureRequest = function (context) {
        var _a, _b;
        return (_b = (_a = context === null || context === void 0 ? void 0 : context.getApiConfig()) === null || _a === void 0 ? void 0 : _a.getCaptureSampleRequest()) !== null && _b !== void 0 ? _b : false;
    };
    ApiProcessor.prototype.shouldCaptureResponse = function (context) {
        var _a, _b;
        return (_b = (_a = context === null || context === void 0 ? void 0 : context.getApiConfig()) === null || _a === void 0 ? void 0 : _a.getCaptureSampleResponse()) !== null && _b !== void 0 ? _b : false;
    };
    ApiProcessor.prototype.getBufferEntryForApiSample = function (context) {
        var request = context.getRequest();
        var response = context.getResponse();
        var apiConfig = context.getApiConfig();
        if (!request || !response) {
            SDKLogger_1.default.error("Incomplete context for creating APISample");
            throw new Error("Incomplete context");
        }
        var method = request.getMethod();
        if (!Object.values(ApiMonitorCommonConstant_1.HttpRequestMethod).includes(method)) {
            SDKLogger_1.default.error("Invalid HTTP method");
            throw new Error("Invalid HTTP method");
        }
        var apiSample = new APISample_1.default({
            rawUri: request.getRawUri(),
            method: method,
            applicationName: context.getApplicationName(),
            hostName: request.getHostName(),
            port: request.getPort(),
            scheme: request.getScheme(),
            parameters: request.getParams(),
            requestHeaders: request.getHeaders(),
            responseHeaders: response.getHeaders(),
            statusCode: response.getStatusCode(),
            requestPayload: request.getBody(),
            responsePayload: response.getBody(),
            uncaughtExceptionMessage: null,
            payloadCaptureAttempted: context.isPayloadCaptureAttempted(),
            requestPayloadCaptureAttempted: context.isRequestPayloadCaptureAttempted(),
            responsePayloadCaptureAttempted: context.isResponsePayloadCaptureAttempted(),
            latency: context.getLatency()
        });
        if (apiConfig && apiConfig.getMethod()) {
            apiSample.setMethod(apiConfig.getMethod());
        }
        else if (method) {
            apiSample.setMethod(method);
        }
        else {
            var observedApi = context.getObservedApi();
            if (observedApi) {
                apiSample.setMethod(observedApi.getMethod());
            }
        }
        return apiSample;
    };
    return ApiProcessor;
}());
exports.default = ApiProcessor;
