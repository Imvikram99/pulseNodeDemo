"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiMonitorPlugin = exports.ApiMonitorSDK = void 0;
var ApiMonitorAutoConfiguration_1 = __importDefault(require("./ApiMonitorAutoConfiguration"));
var SDKLogger_1 = __importDefault(require("./SDKLogger"));
var HttpRequest_1 = __importDefault(require("./filter/HttpRequest"));
var ApiMonitorCommonConstant_1 = require("./common/constant/ApiMonitorCommonConstant");
var MaskingUtils_1 = __importDefault(require("./common/utils/MaskingUtils"));
var ApiMonitorSDK = /** @class */ (function () {
    function ApiMonitorSDK() {
    }
    ApiMonitorSDK.init = function (options, framework) {
        if (framework === void 0) { framework = ApiMonitorCommonConstant_1.Framework.EXPRESS; }
        try {
            if (!ApiMonitorAutoConfiguration_1.default.isValidConfig(options, framework)) {
                return;
            }
            if (options.loggingEnabled) {
                SDKLogger_1.default.loggingEnabled = options.loggingEnabled;
            }
            if (options.logLevel) {
                SDKLogger_1.default.logLevel = options.logLevel;
            }
            if (options.maskHeaders) {
                ApiMonitorSDK.maskHeaders = options.maskHeaders;
            }
            ApiMonitorSDK.apiMonitorAutoConfig = new ApiMonitorAutoConfiguration_1.default(framework);
            ApiMonitorSDK.isSuccess = ApiMonitorSDK.apiMonitorAutoConfig.init();
        }
        catch (error) {
            SDKLogger_1.default.error("Error in ApiMonitorSDK::init - ".concat(error));
        }
    };
    ApiMonitorSDK.capture = function () {
        return function (req, res, next) {
            var _a;
            try {
                if (!ApiMonitorSDK.isSuccess) {
                    SDKLogger_1.default.error("ApiMonitorSDK::capture SDK isn't initialized");
                    next();
                    return;
                }
                (_a = ApiMonitorSDK.apiMonitorAutoConfig.getNodeFilter()) === null || _a === void 0 ? void 0 : _a.processReqAndRes(req, res, next, function (req, queryParams) {
                    var _a;
                    return new HttpRequest_1.default(ApiMonitorSDK.getPathFromRequest(req), req.hostname, (_a = req.socket.address()) === null || _a === void 0 ? void 0 : _a.port, req.protocol, req.method, MaskingUtils_1.default.getReplacedHeaders(req.headers, ApiMonitorSDK.maskHeaders), queryParams, null);
                }, ApiMonitorCommonConstant_1.Framework.EXPRESS, ApiMonitorSDK.maskHeaders);
            }
            catch (error) {
                SDKLogger_1.default.error("Error in ApiMonitorSDK::capture - ".concat(error));
                next();
            }
        };
    };
    ApiMonitorSDK.pluginCapture = function (request, h) {
        return __awaiter(this, void 0, void 0, function () {
            var next, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        if (!ApiMonitorSDK.isSuccess) {
                            return [2 /*return*/, h.continue];
                        }
                        next = new Promise(function (resolve) {
                            var _a;
                            (_a = ApiMonitorSDK.apiMonitorAutoConfig.getNodeFilter()) === null || _a === void 0 ? void 0 : _a.processReqAndRes(request, request.response, function () {
                                resolve(h.continue);
                            }, function (req, queryParams) {
                                return new HttpRequest_1.default(req.path, req.info.hostname, req.server.info.port, req.server.info.protocol, req.method.toUpperCase(), MaskingUtils_1.default.getReplacedHeaders(req.headers, ApiMonitorSDK.maskHeaders), queryParams, null);
                            }, ApiMonitorCommonConstant_1.Framework.HAPI, ApiMonitorSDK.maskHeaders);
                        });
                        return [4 /*yield*/, next];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_1 = _a.sent();
                        SDKLogger_1.default.error("Error in ApiMonitorSDK::pluginCapture - ".concat(error_1));
                        return [2 /*return*/, h.continue];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ApiMonitorSDK.getPathFromRequest = function (req) {
        var path = ApiMonitorSDK.removeTrailingSlash(req.path);
        if (req.baseUrl) {
            path = ApiMonitorSDK.removeTrailingSlash(req.baseUrl) + "/" + path;
        }
        var finalPath = ApiMonitorSDK.removeTrailingSlash(path);
        return finalPath === "" ? "/" : finalPath;
    };
    ApiMonitorSDK.removeTrailingSlash = function (path) {
        return path && path.endsWith("/") ? path.substring(0, path.length - 1) : path;
    };
    ApiMonitorSDK.isSuccess = false;
    ApiMonitorSDK.maskHeaders = [];
    return ApiMonitorSDK;
}());
exports.ApiMonitorSDK = ApiMonitorSDK;
exports.ApiMonitorPlugin = {
    name: "ApiMonitorPlugin",
    version: "0.0.1",
    register: function (server, options) {
        ApiMonitorSDK.init(options, ApiMonitorCommonConstant_1.Framework.HAPI);
        server.ext("onPreResponse", ApiMonitorSDK.pluginCapture);
    },
    info: function () {
        return {
            name: "ApiMonitorPlugin",
            version: "0.0.1",
        };
    }
};
