"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var URIUtils_1 = __importDefault(require("../../utils/URIUtils"));
// Define the URI class
var URI = /** @class */ (function () {
    // Constructor initializes uriPath and hasPathVariable
    function URI(data) {
        this.uriPath = data.uriPath;
        this.hasPathVariable = data.hasPathVariable;
    }
    // Getter for uriPath
    URI.prototype.getUriPath = function () {
        return this.uriPath;
    };
    // Setter for uriPath
    URI.prototype.setUriPath = function (uriPath) {
        this.uriPath = uriPath;
    };
    // Getter for hasPathVariable
    URI.prototype.isHasPathVariable = function () {
        return this.hasPathVariable;
    };
    // Setter for hasPathVariable
    URI.prototype.setHasPathVariable = function (hasPathVariable) {
        this.hasPathVariable = hasPathVariable;
    };
    // Static method to create a non-templated URI
    URI.getNonTemplatedURI = function (uriPath) {
        return new URI({
            uriPath: uriPath,
            hasPathVariable: false,
        });
    };
    // Static method to create a URI
    URI.getURI = function (uriPath) {
        var e_1, _a;
        var pathSegments = URIUtils_1.default.getPathSegments(uriPath);
        var isTemplateURI = false;
        try {
            for (var pathSegments_1 = __values(pathSegments), pathSegments_1_1 = pathSegments_1.next(); !pathSegments_1_1.done; pathSegments_1_1 = pathSegments_1.next()) {
                var pathSegment = pathSegments_1_1.value;
                if (URIUtils_1.default.isPathSegmentTemplate(pathSegment)) {
                    isTemplateURI = true;
                    break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (pathSegments_1_1 && !pathSegments_1_1.done && (_a = pathSegments_1.return)) _a.call(pathSegments_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return new URI({
            uriPath: uriPath,
            hasPathVariable: isTemplateURI,
        });
    };
    // Method to check equality of URIs
    URI.prototype.equals = function (object) {
        if (object == this) {
            return true;
        }
        if (object == null) {
            return false;
        }
        if (!(object instanceof URI)) {
            return false;
        }
        var otherURI = object;
        if (!this.isHasPathVariable() && !otherURI.isHasPathVariable()) {
            return this.getUriPath() === otherURI.getUriPath();
        }
        var pathSegments = URIUtils_1.default.getPathSegments(this.getUriPath());
        var otherURIPathSegments = URIUtils_1.default.getPathSegments(otherURI.getUriPath());
        if (pathSegments.length !== otherURIPathSegments.length) {
            return false;
        }
        for (var idx = 0; idx < pathSegments.length; idx++) {
            var pathSegment = pathSegments[idx];
            var otherPathSegment = otherURIPathSegments[idx];
            if (!URIUtils_1.default.arePathSegmentsMatching(pathSegment, otherPathSegment)) {
                return false;
            }
        }
        return true;
    };
    // Method to get the size of the URI
    URI.prototype.getSize = function () {
        return URIUtils_1.default.getPathSegments(this.getUriPath()).length;
    };
    // Method to get path segments
    URI.prototype.getPathSegments = function () {
        return URIUtils_1.default.getPathSegments(this.getUriPath());
    };
    return URI;
}());
// existing URI class definition
exports.default = URI;
