import { HttpRequestMethod } from "../constant/ApiMonitorCommonConstant";
interface IAPISample {
    rawUri: string | undefined;
    applicationName: string | undefined;
    hostName: string | undefined;
    port: number | undefined;
    scheme: string | undefined;
    method: HttpRequestMethod | undefined;
    parameters: any;
    requestHeaders: any;
    responseHeaders: any;
    statusCode: number | undefined;
    requestPayload: any;
    responsePayload: any;
    uncaughtExceptionMessage: any;
    payloadCaptureAttempted: boolean;
    requestPayloadCaptureAttempted: boolean;
    responsePayloadCaptureAttempted: boolean;
    latency: number | undefined;
}
declare class APISample {
    private rawUri;
    private applicationName;
    private hostName;
    private port;
    private scheme;
    private method;
    private parameters;
    private requestHeaders;
    private responseHeaders;
    private statusCode;
    private requestPayload;
    private responsePayload;
    private uncaughtExceptionMessage;
    private payloadCaptureAttempted;
    private requestPayloadCaptureAttempted;
    private responsePayloadCaptureAttempted;
    private latency;
    constructor(apiSample: IAPISample);
    getRawUri(): string | undefined;
    setRawUri(rawUri: string | undefined): void;
    getApplicationName(): string | undefined;
    setApplicationName(applicationName: string | undefined): void;
    getHostName(): string | undefined;
    setHostName(hostName: string | undefined): void;
    getPort(): number | undefined;
    setPort(port: number | undefined): void;
    getScheme(): string | undefined;
    setScheme(scheme: string | undefined): void;
    getMethod(): HttpRequestMethod | undefined;
    setMethod(method: HttpRequestMethod | undefined): void;
    getParameters(): any;
    setParameters(parameters: any): void;
    getRequestHeaders(): any;
    setRequestHeaders(requestHeaders: any): void;
    getResponseHeaders(): any;
    setResponseHeaders(responseHeaders: any): void;
    getStatusCode(): number | undefined;
    setStatusCode(statusCode: number | undefined): void;
    getRequestPayload(): any;
    setRequestPayload(requestPayload: any): void;
    getResponsePayload(): any;
    setResponsePayload(responsePayload: any): void;
    getUncaughtExceptionMessage(): any;
    setUncaughtExceptionMessage(uncaughtExceptionMessage: any): void;
    getPayloadCaptureAttempted(): boolean;
    setPayloadCaptureAttempted(payloadCaptureAttempted: boolean): void;
    getRequestPayloadCaptureAttempted(): boolean;
    setRequestPayloadCaptureAttempted(requestPayloadCaptureAttempted: boolean): void;
    getResponsePayloadCaptureAttempted(): boolean;
    setResponsePayloadCaptureAttempted(responsePayloadCaptureAttempted: boolean): void;
    getLatency(): number | undefined;
    setLatency(latency: number | undefined): void;
}
export default APISample;
