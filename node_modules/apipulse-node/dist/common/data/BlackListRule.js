"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Validators_1 = require("../utils/Validators");
var URI_1 = __importDefault(require("./uri/URI"));
var BlackListRule = /** @class */ (function () {
    function BlackListRule(data) {
        this.blackListType = data.blackListType;
        this.matchValues = data.matchValues;
        this.method = data.method;
    }
    BlackListRule.prototype.isValid = function () {
        if ((0, Validators_1.isBlank)(this.blackListType) || (0, Validators_1.isNil)(this.matchValues)) {
            return false;
        }
        return true;
    };
    BlackListRule.prototype.matchesUri = function (uri, method) {
        var e_1, _a, e_2, _b;
        if (!this.isValid()) {
            return false;
        }
        if ((0, Validators_1.isNil)(uri) || (0, Validators_1.isNil)(method)) {
            return false;
        }
        if (!(0, Validators_1.isNil)(this.method) && this.method !== method) {
            return false;
        }
        if (this.blackListType.toLowerCase() === "endswith") {
            try {
                for (var _c = __values(this.matchValues), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var matchValue = _d.value;
                    if (uri.getUriPath().toLowerCase().endsWith(matchValue.toLowerCase())) {
                        return true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else if (this.blackListType.toLowerCase() === "absolute") {
            try {
                for (var _e = __values(this.matchValues), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var matchValue = _f.value;
                    if (uri.equals(URI_1.default.getURI(matchValue))) {
                        return true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return false;
    };
    // Getters and setters
    BlackListRule.prototype.getBlackListType = function () {
        return this.blackListType;
    };
    BlackListRule.prototype.setBlackListType = function (blackListType) {
        this.blackListType = blackListType;
    };
    BlackListRule.prototype.getMatchValues = function () {
        return this.matchValues;
    };
    BlackListRule.prototype.setMatchValues = function (matchValues) {
        this.matchValues = matchValues;
    };
    BlackListRule.prototype.getMethod = function () {
        return this.method;
    };
    BlackListRule.prototype.setMethod = function (method) {
        this.method = method;
    };
    return BlackListRule;
}());
exports.default = BlackListRule;
