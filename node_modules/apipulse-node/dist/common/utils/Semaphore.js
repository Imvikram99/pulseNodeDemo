"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Semaphore = /** @class */ (function () {
    function Semaphore(count) {
        this._count = count;
        this._queue = [];
    }
    Semaphore.prototype.tryAcquire = function () {
        if (this._count > 0) {
            this._count--;
            //console.log("Lock acquired, remaining locks:", this._count);
            return true;
        }
        //console.log("Failed to acquire lock, remaining locks:", this._count);
        return false;
    };
    Semaphore.prototype.acquire = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._count > 0) {
                _this._count--;
                //console.log("Lock acquired, remaining locks:", this._count);
                resolve();
            }
            else {
                //console.log("Lock not available, queuing request");
                _this._queue.push(function () {
                    //console.log("Lock acquired from queue, remaining locks:", this._count);
                    resolve();
                });
            }
        }).catch(function (error) {
            console.error("An error occurred while acquiring lock:", error);
            throw error;
        });
    };
    Semaphore.prototype.release = function () {
        if (this._queue.length > 0) {
            var nextInLine = this._queue.shift();
            if (nextInLine) {
                nextInLine();
            }
        }
        else {
            this._count++;
            //console.log("Lock released, remaining locks:", this._count);
        }
    };
    return Semaphore;
}());
exports.default = Semaphore;
