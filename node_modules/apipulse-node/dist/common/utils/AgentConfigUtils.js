"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var BlackListRule_1 = __importDefault(require("../data/BlackListRule"));
var Validators_1 = require("./Validators");
var AgentConfigUtils = /** @class */ (function () {
    function AgentConfigUtils() {
    }
    AgentConfigUtils.isConfigValid = function (config) {
        var e_1, _a, e_2, _b;
        if ((0, Validators_1.isNil)(config)) {
            return false;
        }
        if ((0, Validators_1.isNil)(config.getBufferSyncFreqInSec())) {
            return false;
        }
        if ((0, Validators_1.isNil)(config.getConfigFetchFreqInSec())) {
            return false;
        }
        if ((0, Validators_1.isNil)(config.getCaptureApiSample())) {
            return false;
        }
        if ((0, Validators_1.isNil)(config.getDiscoveryBufferSize())) {
            return false;
        }
        if ((0, Validators_1.isNil)(config.getDiscoveryBufferSizePerApi())) {
            return false;
        }
        if (!(0, Validators_1.isNil)(config.getRegisteredApiConfigs())) {
            try {
                for (var _c = __values(config.getRegisteredApiConfigs()), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var apiConfig = _d.value;
                    if (!this.isApiConfigValid(apiConfig)) {
                        return false;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (Array.isArray(config.getBlackListRules())) {
            try {
                for (var _e = __values(config.getBlackListRules()), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var blackListRule = _f.value;
                    if (!AgentConfigUtils.isBlackListRuleValid(blackListRule)) { // Replace YourClassName with the actual class name
                        return false;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return true;
    };
    AgentConfigUtils.isBlackListRuleValid = function (blackListRule) {
        if ((0, Validators_1.isNil)(blackListRule)) {
            //console.log("BlackListRule is nil or undefined.");
            return true;
        }
        // Check if it's an instance of BlackListRule and use isValid
        if (blackListRule instanceof BlackListRule_1.default) {
            //console.log("instance of blacklist rule vikram")
            var isValid = blackListRule.isValid();
            //console.log(`BlackListRule (instance) is ${isValid ? 'valid' : 'not valid'}:`, blackListRule);
            return isValid;
        }
        // Fallback to validate plain object
        // if (isNil(blackListRule.blackListType) || isNil(blackListRule.matchValues)) {
        //     //console.log("BlackListRule (plain object) properties are not valid:", blackListRule);
        //     return false;
        // }
        //console.log("BlackListRule (plain object) is considered valid:", blackListRule);
        return true;
    };
    AgentConfigUtils.isApiConfigValid = function (apiConfig) {
        if ((0, Validators_1.isNil)(apiConfig)) {
            return false;
        }
        if (!this.isURIValid(apiConfig.getUri())) {
            return false;
        }
        if ((0, Validators_1.isNil)(apiConfig.getMethod())) {
            return false;
        }
        if ((0, Validators_1.isNil)(apiConfig.getBufferSize())) {
            return false;
        }
        if ((0, Validators_1.isNil)(apiConfig.getCaptureSampleRequest())) {
            return false;
        }
        if ((0, Validators_1.isNil)(apiConfig.getCaptureSampleResponse())) {
            return false;
        }
        return true;
    };
    AgentConfigUtils.isURIValid = function (uri) {
        if ((0, Validators_1.isNil)(uri)) {
            return false;
        }
        if ((0, Validators_1.isNil)(uri.getUriPath())) {
            return false;
        }
        if (uri.getUriPath().length === 0) {
            return false;
        }
        return true;
    };
    return AgentConfigUtils;
}());
exports.default = AgentConfigUtils;
