"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var SimpleConfigManager_1 = __importDefault(require("./config/SimpleConfigManager"));
var AppConfig_1 = __importDefault(require("./config/AppConfig"));
var RegisteredApiBufferManager_1 = __importDefault(require("./buffer/RegisteredApiBufferManager"));
var DiscoveredApiBufferManager_1 = __importDefault(require("./buffer/DiscoveredApiBufferManager"));
var ApiProcessor_1 = __importDefault(require("./filter/ApiProcessor"));
var ApiMonitorNodeFilter_1 = __importDefault(require("./filter/ApiMonitorNodeFilter"));
var Validators_1 = require("./common/utils/Validators");
var RequestExecutor_1 = __importDefault(require("./common/utils/RequestExecutor"));
var ApiMonitorCommonConstant_1 = require("./common/constant/ApiMonitorCommonConstant");
var RouteManager_1 = __importDefault(require("./buffer/RouteManager"));
var ApiMonitorAutoConfiguration = /** @class */ (function () {
    function ApiMonitorAutoConfiguration(framework) {
        this.framework = framework;
    }
    ApiMonitorAutoConfiguration.isValidConfig = function (options, framework) {
        try {
            AppConfig_1.default.setConfig(options);
            if ((0, Validators_1.isNil)(options)) {
                throw new Error("Mandatory Config { url: string, applicationName: string, authKey: string, environment: string } is missing");
            }
            ['authKey', 'environment', 'url', 'applicationName', 'teamName', 'partnerId'].forEach(function (key) {
                if ((0, Validators_1.isNil)(options[key])) {
                    throw new Error("Mandatory Config `".concat(key, "` is missing"));
                }
            });
            if (framework === ApiMonitorCommonConstant_1.Framework.EXPRESS && ((0, Validators_1.isNil)(options.app) || !(typeof options.app === 'function' && typeof options.app.handle === 'function'))) {
                throw new Error("Mandatory Config `app` is missing or app is a valid Express application");
            }
            if (framework === ApiMonitorCommonConstant_1.Framework.HAPI && ((0, Validators_1.isNil)(options.app) || !(typeof options.app === 'object' && typeof options.app.table === 'function'))) {
                throw new Error("Mandatory Config `app` is missing or app is a valid Hapi server");
            }
            return true;
        }
        catch (error) {
            console.error(error); //vikram
            return false;
        }
    };
    ApiMonitorAutoConfiguration.prototype.init = function () {
        try {
            var randomId = Math.floor(Math.random() * 1000000000);
            var agentId = randomId.toString();
            RequestExecutor_1.default["X-API-KEY"] = AppConfig_1.default.getAuthKey();
            RequestExecutor_1.default["X-ENV-NAME"] = AppConfig_1.default.getEnvironment();
            RequestExecutor_1.default["X-PARTNER-ID"] = AppConfig_1.default.getPartnerId();
            RequestExecutor_1.default["X-TEAM-NAME"] = AppConfig_1.default.getTeamName();
            RequestExecutor_1.default["X-SERVICE-NAME"] = AppConfig_1.default.getApplicationName();
            var routeManager = new RouteManager_1.default(this.framework);
            routeManager.sendRoutes();
            //console.log("sent the routes");
            var configManager = new SimpleConfigManager_1.default(agentId);
            configManager.init(true);
            //console.log("init config");
            var registeredBufferManager = new RegisteredApiBufferManager_1.default(configManager, this.framework);
            registeredBufferManager.init();
            var discoveredBufferManager = new DiscoveredApiBufferManager_1.default(configManager);
            discoveredBufferManager.init();
            var ApiMonitorApiProcessor = new ApiProcessor_1.default(registeredBufferManager, discoveredBufferManager);
            var apiMonitorNodeFilter = new ApiMonitorNodeFilter_1.default(configManager, ApiMonitorApiProcessor, AppConfig_1.default.getApplicationName());
            apiMonitorNodeFilter.init();
            this.nodeFilter = apiMonitorNodeFilter;
            //console.log(`ApiMonitorNodeFilter Node Filter initialized with \nurl:: ${AppConfig.getUrl()} \n applicationName:: ${AppConfig.getApplicationName()} \n SDK Version:: ${SDKVersion.MAJOR_VERSION}.${SDKVersion.MINOR_VERSION}`);
            return true;
        }
        catch (error) {
            console.error("Failed to initialize ApiMonitorAutoConfiguration:", error);
            return false;
        }
    };
    ApiMonitorAutoConfiguration.prototype.getNodeFilter = function () {
        return this.nodeFilter;
    };
    return ApiMonitorAutoConfiguration;
}());
exports.default = ApiMonitorAutoConfiguration;
