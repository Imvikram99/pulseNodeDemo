"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var AppConfig_1 = __importDefault(require("./AppConfig"));
var AgentConfig_1 = __importDefault(require("../common/data/AgentConfig"));
var ConfigOrError_1 = __importDefault(require("./ConfigOrError"));
var SDKVersion_1 = __importDefault(require("../SDKVersion"));
var ApiMonitorCommonConstant_1 = require("../common/constant/ApiMonitorCommonConstant");
var AgentConfigUtils_1 = __importDefault(require("../common/utils/AgentConfigUtils"));
var RequestExecutor_1 = require("../common/utils/RequestExecutor");
var SDKLogger_1 = __importDefault(require("../SDKLogger"));
var SimpleConfigManager = /** @class */ (function () {
    function SimpleConfigManager(agentId) {
        this.configUpdateListeners = [];
        this.executionerService = null;
        this.ctUrl = AppConfig_1.default.getUrl();
        this.userApplicationName = AppConfig_1.default.getApplicationName();
        this.agentId = agentId;
    }
    SimpleConfigManager.prototype.subscribeToUpdates = function (configUpdateListener) {
        this.configUpdateListeners.push(configUpdateListener);
        return true;
    };
    SimpleConfigManager.prototype.getUri = function () {
        return "/api/v1/mirror/agent-config";
    };
    SimpleConfigManager.prototype.init = function (isStartup) {
        if (isStartup === void 0) { isStartup = false; }
        try {
            this.fetchConfigNotify(isStartup);
            this.scheduleConfigRefresh(60);
            return true;
        }
        catch (e) {
            SDKLogger_1.default.error("While initializing config manager: ".concat(e));
            return false;
        }
    };
    SimpleConfigManager.prototype.scheduleConfigRefresh = function (timeInSec) {
        var _this = this;
        this.executionerService = setTimeout(function () {
            _this.fetchConfigNotify();
        }, timeInSec * 1000);
    };
    SimpleConfigManager.prototype.fetchConfigNotify = function (isStartup) {
        if (isStartup === void 0) { isStartup = false; }
        return __awaiter(this, void 0, void 0, function () {
            var configOrError;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchConfig(isStartup)];
                    case 1:
                        configOrError = _a.sent();
                        if (configOrError.errorCode) {
                            this.scheduleConfigRefresh(60);
                            this.onUnSuccessfulConfigFetch();
                        }
                        else {
                            if (configOrError.agentConfig) {
                                this.scheduleConfigRefresh(configOrError.agentConfig.getConfigFetchFreqInSec());
                                this.onSuccessfulConfigFetch(configOrError.agentConfig);
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    SimpleConfigManager.prototype.onSuccessfulConfigFetch = function (agentConfig) {
        this.configUpdateListeners.forEach(function (listener) {
            listener.onSuccessfulConfigUpdate(agentConfig);
        });
    };
    SimpleConfigManager.prototype.onUnSuccessfulConfigFetch = function () {
        this.configUpdateListeners.forEach(function (listener) {
            listener.onErroneousConfigUpdate();
        });
    };
    SimpleConfigManager.prototype.fetchConfig = function (isStartup) {
        if (isStartup === void 0) { isStartup = false; }
        return __awaiter(this, void 0, void 0, function () {
            var queryParams, queryString, headers, url, agentConfig_1, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParams = {
                            agentId: this.agentId,
                            appName: this.userApplicationName,
                            isStartup: isStartup.toString(),
                        };
                        queryString = Object.keys(queryParams).map(function (key) { return "".concat(key, "=").concat(queryParams[key]); }).join("&");
                        headers = Object.assign({ Accept: "application/json", Connection: "close" }, SDKVersion_1.default);
                        url = "".concat(this.ctUrl).concat(this.getUri(), "?").concat(queryString);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        agentConfig_1 = null;
                        return [4 /*yield*/, (0, RequestExecutor_1.getRequest)(url, headers).then(function (response) {
                                try {
                                    //console.log("config response: " + response); 
                                    agentConfig_1 = new AgentConfig_1.default(JSON.parse(response));
                                    //console.log("agentConfig: " + JSON.stringify(agentConfig, null, 2));
                                }
                                catch (e) {
                                    SDKLogger_1.default.error("While parsing config response: ".concat(e));
                                }
                            })];
                    case 2:
                        _a.sent();
                        if (agentConfig_1) {
                            if (AgentConfigUtils_1.default.isConfigValid(agentConfig_1)) {
                                return [2 /*return*/, new ConfigOrError_1.default(agentConfig_1, null)];
                            }
                            else {
                                SDKLogger_1.default.error("Config fetched successfully but invalid");
                                return [2 /*return*/, new ConfigOrError_1.default(null, ApiMonitorCommonConstant_1.ConfigErrorCode.INVALID_CONFIG)];
                            }
                        }
                        else {
                            return [2 /*return*/, new ConfigOrError_1.default(null, ApiMonitorCommonConstant_1.ConfigErrorCode.INVALID_CONFIG)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        SDKLogger_1.default.error("Error while parsing config: ".concat(e_1));
                        return [2 /*return*/, new ConfigOrError_1.default(null, ApiMonitorCommonConstant_1.ConfigErrorCode.PARSE_ERROR)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SimpleConfigManager.prototype.shutdown = function () {
        if (this.executionerService) {
            clearTimeout(this.executionerService);
        }
        return true;
    };
    return SimpleConfigManager;
}());
exports.default = SimpleConfigManager;
