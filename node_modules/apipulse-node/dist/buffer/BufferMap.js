"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var BufferMap = /** @class */ (function () {
    function BufferMap() {
        this.bufferMap = new Map();
    }
    BufferMap.prototype.getBufferMap = function () {
        return this.bufferMap;
    };
    BufferMap.prototype.setBufferMap = function (bufferMap) {
        this.bufferMap = bufferMap;
    };
    BufferMap.prototype.getBuffer = function (apiBufferKey) {
        var e_1, _a;
        try {
            for (var _b = __values(this.bufferMap.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (key.equals(apiBufferKey)) {
                    return this.bufferMap.get(key);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return undefined;
    };
    BufferMap.prototype.computeIfAbsent = function (apiBufferKey, buffer) {
        var simpleBuffer = this.getBuffer(apiBufferKey);
        if (simpleBuffer) {
            return simpleBuffer;
        }
        this.bufferMap.set(apiBufferKey, buffer);
        return buffer;
    };
    BufferMap.prototype.delete = function (apiBufferKey) {
        var e_2, _a;
        try {
            for (var _b = __values(this.bufferMap.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (key.equals(apiBufferKey)) {
                    return this.bufferMap.delete(key);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return false;
    };
    BufferMap.prototype.clear = function () {
        try {
            this.bufferMap.clear();
        }
        catch (error) {
            console.error("Failed to clear BufferMap:", error);
        }
    };
    return BufferMap;
}());
exports.default = BufferMap;
