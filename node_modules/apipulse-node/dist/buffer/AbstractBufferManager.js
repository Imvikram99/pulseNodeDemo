"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var NoOpBufferManagerWorker_1 = __importDefault(require("./NoOpBufferManagerWorker"));
var AbstractBufferManager = /** @class */ (function () {
    function AbstractBufferManager(configManager) {
        this.configManager = configManager;
        this.dummyWorker = this.createDummyWorker(); // Assuming you have a method to create a dummy worker
        this.worker = this.dummyWorker;
    }
    AbstractBufferManager.prototype.onErroneousConfigUpdate = function () {
        if (this.worker) {
            var oldBuffer = this.worker;
            this.worker = this.dummyWorker;
            oldBuffer.shutdown();
        }
    };
    AbstractBufferManager.prototype.onSuccessfulConfigUpdate = function (agentConfig) {
        if (!this.worker || !this.worker.getOperatingConfig()) {
            return;
        }
        var currentConfig = this.worker.getOperatingConfig();
        if (currentConfig !== null) {
            if (this.isRefreshNeeded(currentConfig, agentConfig)) {
                var oldBufferManagerWorker = this.worker;
                this.worker = this.createWorker(agentConfig);
                oldBufferManagerWorker.shutdown();
            }
        }
        else {
            console.warn("Current operating config is null. Skipping refresh.");
        }
    };
    AbstractBufferManager.prototype.init = function () {
        try {
            return this.configManager.subscribeToUpdates(this);
        }
        catch (error) {
            console.error("Failed to initialize AbstractBufferManager:", error);
            return false;
        }
    };
    AbstractBufferManager.prototype.shutdown = function () {
        try {
            if (this.worker) {
                this.worker.shutdown();
                this.worker = null;
            }
            return true;
        }
        catch (error) {
            console.error("Failed to shutdown AbstractBufferManager:", error);
            return false;
        }
    };
    AbstractBufferManager.prototype.isRefreshNeeded = function (olderConfig, newConfig) {
        if (newConfig.getTimestamp().getTime() === 0 &&
            olderConfig.getTimestamp().getTime() === 0) {
            return false;
        }
        return (newConfig.getTimestamp().getTime() > olderConfig.getTimestamp().getTime());
    };
    AbstractBufferManager.prototype.getWorker = function () {
        return this.worker;
    };
    AbstractBufferManager.prototype.createDummyWorker = function () {
        // Implement or import your NoOpBufferManagerWorker here as a dummy worker
        return new NoOpBufferManagerWorker_1.default(); // Assuming NoOpBufferManagerWorker is imported and compatible
    };
    return AbstractBufferManager;
}());
exports.default = AbstractBufferManager;
