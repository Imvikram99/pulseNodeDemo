"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var BufferMap_1 = __importDefault(require("./BufferMap"));
var BufferManagerWorker = /** @class */ (function () {
    function BufferManagerWorker(agentConfig, ctUrl) {
        var _this = this;
        this.bufferSyncExecutorService = null;
        this.bufferMap = new BufferMap_1.default();
        this.agentConfig = agentConfig;
        this.ctUrl = ctUrl;
        if (agentConfig) {
            this.bufferSyncExecutorService = setInterval(function () {
                _this.syncForKeys();
            }, agentConfig.getBufferSyncFreqInSec() * 1000);
        }
    }
    BufferManagerWorker.prototype.getOperatingConfig = function () {
        return this.agentConfig;
    };
    BufferManagerWorker.prototype.shutdown = function () {
        try {
            if (this.bufferSyncExecutorService) {
                clearInterval(this.bufferSyncExecutorService);
            }
            this.cleanUpBufferMap();
            return true;
        }
        catch (error) {
            console.error("Failed to shutdown BufferManagerWorker:", error);
            return false;
        }
    };
    BufferManagerWorker.prototype.cleanUpBufferMap = function () {
        var e_1, _a;
        this.syncForKeys();
        var keys = this.bufferMap.getBufferMap().keys();
        if (keys) {
            try {
                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    var buffer = this.bufferMap.getBuffer(key);
                    if (buffer) {
                        buffer.clear();
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.bufferMap.clear();
        }
    };
    BufferManagerWorker.prototype.getUri = function () {
        return "/api/v1/mirror/data-ingestion/api-sample";
    };
    BufferManagerWorker.prototype.syncForKeys = function () {
        var e_2, _a;
        var keys = this.bufferMap.getBufferMap().keys();
        if (keys) {
            try {
                for (var keys_2 = __values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
                    var key = keys_2_1.value;
                    this.syncForKey(key);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (keys_2_1 && !keys_2_1.done && (_a = keys_2.return)) _a.call(keys_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    return BufferManagerWorker;
}());
exports.default = BufferManagerWorker;
