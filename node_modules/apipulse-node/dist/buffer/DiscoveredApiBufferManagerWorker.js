"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var BufferManagerWorker_1 = __importDefault(require("./BufferManagerWorker"));
var AppConfig_1 = __importDefault(require("../config/AppConfig"));
var Semaphore_1 = __importDefault(require("../common/utils/Semaphore"));
var SimpleBuffer_1 = __importDefault(require("./SimpleBuffer"));
var RequestExecutor_1 = require("../common/utils/RequestExecutor");
var SDKLogger_1 = __importDefault(require("../SDKLogger"));
var DiscoveredApiBufferManagerWorker = /** @class */ (function (_super) {
    __extends(DiscoveredApiBufferManagerWorker, _super);
    function DiscoveredApiBufferManagerWorker(config) {
        var _this = _super.call(this, config, AppConfig_1.default.getUrl()) || this;
        _this.semaphore = new Semaphore_1.default(config.getDiscoveryBufferSize());
        return _this;
    }
    DiscoveredApiBufferManagerWorker.prototype.init = function () {
        return true;
    };
    DiscoveredApiBufferManagerWorker.prototype.offer = function (key, apiSample) {
        var _a, _b, _c;
        try {
            var buffer = this.bufferMap.computeIfAbsent(key, new SimpleBuffer_1.default((_b = (_a = this.getOperatingConfig()) === null || _a === void 0 ? void 0 : _a.getDiscoveryBufferSizePerApi()) !== null && _b !== void 0 ? _b : 10));
            return (_c = buffer === null || buffer === void 0 ? void 0 : buffer.offer(apiSample)) !== null && _c !== void 0 ? _c : false;
        }
        catch (error) {
            SDKLogger_1.default.error("Failed to offer API sample: ".concat(error));
            return false;
        }
    };
    DiscoveredApiBufferManagerWorker.prototype.canOffer = function (key) {
        var _a, _b, _c;
        try {
            if (this.semaphore.tryAcquire()) {
                var canOffer = false;
                if ((_a = this.getOperatingConfig()) === null || _a === void 0 ? void 0 : _a.getCaptureApiSample()) {
                    var buffer = this.bufferMap.getBuffer(key);
                    canOffer = buffer
                        ? buffer.canOffer()
                        : this.bufferMap.getBufferMap().size <
                            ((_c = (_b = this.getOperatingConfig()) === null || _b === void 0 ? void 0 : _b.getDiscoveryBufferSize()) !== null && _c !== void 0 ? _c : 10);
                }
                this.semaphore.release();
                return canOffer;
            }
            return false;
        }
        catch (error) {
            SDKLogger_1.default.error("Failed to check if can offer: ".concat(error));
            return false;
        }
    };
    DiscoveredApiBufferManagerWorker.prototype.syncForKey = function (key) {
        try {
            SDKLogger_1.default.log("DiscoveredApiBufferManagerWorker::syncForKey");
            var buffer = this.bufferMap.getBuffer(key);
            if (!buffer)
                return;
            var iterations = buffer.getContentCount();
            if (iterations === 0) {
                this.bufferMap.delete(key);
                return;
            }
            var contents_1 = [];
            for (var i = 0; i < iterations; i++) {
                var apiSample = buffer.poll();
                if (apiSample) {
                    contents_1.push(apiSample);
                }
                else {
                    this.bufferMap.delete(key);
                    break;
                }
            }
            if (contents_1.length === 0)
                return;
            var payload = {
                apiSamples: contents_1.map(function (e) { return (__assign(__assign({}, e), { uri: { uriPath: e.rawUri, hasPathVariable: false } })); }),
                apiOwner: {
                    env: AppConfig_1.default.getEnvironment(),
                    team: AppConfig_1.default.getTeamName(),
                    serviceName: AppConfig_1.default.getApplicationName(),
                },
            };
            (0, RequestExecutor_1.postRequest)("".concat(this.ctUrl).concat(this.getUri()), payload)
                .then(function (resp) {
                SDKLogger_1.default.log("DiscoveredApiBufferManagerWorker::syncForKey response ".concat(JSON.stringify(resp)));
                if ((resp === null || resp === void 0 ? void 0 : resp.statusCode) !== 200) {
                    SDKLogger_1.default.error("While sending discovered API samples ".concat(JSON.stringify(contents_1)));
                }
            })
                .catch(function (err) {
                SDKLogger_1.default.error("While sending discovered API samples ".concat(err));
            });
        }
        catch (e) {
            SDKLogger_1.default.error("While sending discovered API samples ".concat(e));
        }
    };
    return DiscoveredApiBufferManagerWorker;
}(BufferManagerWorker_1.default));
exports.default = DiscoveredApiBufferManagerWorker;
