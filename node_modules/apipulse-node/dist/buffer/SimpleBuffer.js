"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var SDKLogger_1 = __importDefault(require("../SDKLogger"));
var SimpleBuffer = /** @class */ (function () {
    function SimpleBuffer(capacity) {
        this.size = capacity;
        this.arrayBlockingQueue = [];
        SDKLogger_1.default.log("SimpleBuffer::constructor - Initialized with capacity: ".concat(capacity));
    }
    SimpleBuffer.prototype.offer = function (apiSample) {
        SDKLogger_1.default.log("SimpleBuffer::offer");
        try {
            if (this.canOffer()) {
                this.arrayBlockingQueue.push(apiSample);
                return true;
            }
            return false;
        }
        catch (error) {
            SDKLogger_1.default.error("Error in offer: ".concat(error));
            return false;
        }
    };
    SimpleBuffer.prototype.canOffer = function () {
        SDKLogger_1.default.log("SimpleBuffer::canOffer");
        try {
            return this.size > 0 && this.arrayBlockingQueue.length < this.size;
        }
        catch (error) {
            SDKLogger_1.default.error("Error in canOffer: ".concat(error));
            return false;
        }
    };
    SimpleBuffer.prototype.poll = function () {
        SDKLogger_1.default.log("SimpleBuffer::poll");
        try {
            if (this.arrayBlockingQueue.length > 0) {
                return this.arrayBlockingQueue.shift();
            }
            return undefined;
        }
        catch (error) {
            SDKLogger_1.default.error("Error in poll: ".concat(error));
            return undefined;
        }
    };
    SimpleBuffer.prototype.getContentCount = function () {
        SDKLogger_1.default.log("SimpleBuffer::getContentCount");
        try {
            return this.arrayBlockingQueue.length;
        }
        catch (error) {
            SDKLogger_1.default.error("Error in getContentCount: ".concat(error));
            return 0;
        }
    };
    SimpleBuffer.prototype.clear = function () {
        SDKLogger_1.default.log("SimpleBuffer::clear");
        try {
            this.arrayBlockingQueue = [];
            return true;
        }
        catch (error) {
            SDKLogger_1.default.error("Error in clear: ".concat(error));
            return false;
        }
    };
    return SimpleBuffer;
}());
exports.default = SimpleBuffer;
