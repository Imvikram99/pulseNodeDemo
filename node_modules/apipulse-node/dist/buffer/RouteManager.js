"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var AppConfig_1 = __importDefault(require("../config/AppConfig"));
var ApiMonitorCommonConstant_1 = require("../common/constant/ApiMonitorCommonConstant");
var SDKLogger_1 = __importDefault(require("../SDKLogger"));
var RequestExecutor_1 = require("../common/utils/RequestExecutor");
var RouteManager = /** @class */ (function () {
    function RouteManager(framework) {
        this.framework = framework;
        this.ctUrl = AppConfig_1.default.getUrl();
        SDKLogger_1.default.log("RegisteredApiBufferManager::constructor");
    }
    RouteManager.prototype.sendRoutes = function () {
        var app = AppConfig_1.default.getApp();
        if (this.framework === ApiMonitorCommonConstant_1.Framework.EXPRESS) {
            this.sendExpressRoutes(app);
        }
        else if (this.framework === ApiMonitorCommonConstant_1.Framework.HAPI) {
            this.sendHapiRoutes(app);
        }
    };
    RouteManager.prototype.sendExpressRoutes = function (app) {
        var _this = this;
        var interval = setInterval(function () {
            if (app._router && app._router.stack.length > 0) {
                clearInterval(interval);
                var path = "/api/v1/mirror/data-ingestion/code-sample";
                var routes = _this.listExpressRoutes(app);
                var body = {
                    controllerVsApis: {
                        "class com_example_demo_ItemController1": routes,
                    },
                    serviceName: AppConfig_1.default.getApplicationName(),
                    team: AppConfig_1.default.getTeamName(),
                    env: AppConfig_1.default.getEnvironment(),
                };
                (0, RequestExecutor_1.postRequest)(_this.ctUrl + path, body)
                    .then(function (data) {
                    SDKLogger_1.default.log("RegisteredApiBufferManagerWorker::syncForKey response ".concat(JSON.stringify(data)));
                })
                    .catch(function (error) {
                    SDKLogger_1.default.error("While sending registered api sample: ".concat(error));
                });
            }
        }, 1000);
    };
    RouteManager.prototype.sendHapiRoutes = function (app) {
        var _this = this;
        app.events.on("start", function () {
            var path = "/api/v1/mirror/data-ingestion/code-sample";
            var routes = _this.listHapiRoutes(app);
            var body = {
                controllerVsApis: {
                    "class com_example_demo_ItemController1": routes,
                },
                serviceName: AppConfig_1.default.getApplicationName(),
                team: AppConfig_1.default.getTeamName(),
                env: AppConfig_1.default.getEnvironment(),
            };
            (0, RequestExecutor_1.postRequest)(_this.ctUrl + path, body)
                .then(function (data) {
                SDKLogger_1.default.log("RegisteredApiBufferManagerWorker::syncForKey response ".concat(JSON.stringify(data)));
            })
                .catch(function (error) {
                SDKLogger_1.default.error("While sending registered api sample: ".concat(error));
            });
        });
    };
    RouteManager.prototype.listExpressRoutes = function (app) {
        var routes = [];
        app._router.stack.map(function (middleware) {
            if (middleware.route) {
                routes.push({
                    pattern: "/".concat(middleware.route.path
                        .split("/")
                        .map(function (path) {
                        return path.includes(":")
                            ? "{".concat(path.replace(":", ""), "}")
                            : path;
                    })
                        .filter(Boolean)
                        .join("/")),
                    method: Object.keys(middleware.route.methods).map(function (method) { return method.toUpperCase(); })[0],
                });
            }
            else if (middleware.name === "router") {
                middleware.handle.stack.forEach(function (handler) {
                    if (handler.route) {
                        routes.push({
                            pattern: "/".concat(handler.route.path
                                .split("/")
                                .map(function (path) {
                                return path.includes(":")
                                    ? "{".concat(path.replace(":", ""), "}")
                                    : path;
                            })
                                .filter(Boolean)
                                .join("/")),
                            method: Object.keys(handler.route.methods).map(function (method) { return method.toUpperCase(); })[0],
                        });
                    }
                });
            }
        });
        return routes;
    };
    RouteManager.prototype.listHapiRoutes = function (app) {
        var routes = [];
        app.table().map(function (route) {
            routes.push({
                pattern: "/".concat(route.path
                    .split("/")
                    .map(function (path) {
                    return path.includes("{")
                        ? "{".concat(path.replace("{", "").replace("}", ""), "}")
                        : path;
                })
                    .filter(Boolean)
                    .join("/")),
                method: route.method.toUpperCase(),
            });
        });
        return routes;
    };
    return RouteManager;
}());
exports.default = RouteManager;
