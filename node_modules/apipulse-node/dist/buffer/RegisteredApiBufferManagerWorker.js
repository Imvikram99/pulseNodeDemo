"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var BufferManagerWorker_1 = __importDefault(require("./BufferManagerWorker"));
var AppConfig_1 = __importDefault(require("../config/AppConfig"));
var Semaphore_1 = __importDefault(require("../common/utils/Semaphore"));
var SimpleBuffer_1 = __importDefault(require("./SimpleBuffer"));
var RequestExecutor_1 = require("../common/utils/RequestExecutor");
var SDKLogger_1 = __importDefault(require("../SDKLogger"));
var RegisteredApiBufferManagerWorker = /** @class */ (function (_super) {
    __extends(RegisteredApiBufferManagerWorker, _super);
    function RegisteredApiBufferManagerWorker(config) {
        var _this = _super.call(this, config, AppConfig_1.default.getUrl()) || this;
        _this.semaphore = new Semaphore_1.default(_this.getRegisteredApiCountToCapture());
        SDKLogger_1.default.log("RegisteredApiBufferManagerWorker::constructor");
        return _this;
    }
    RegisteredApiBufferManagerWorker.prototype.init = function () {
        SDKLogger_1.default.log("RegisteredApiBufferManagerWorker::init");
        return true;
    };
    RegisteredApiBufferManagerWorker.prototype.offer = function (key, apiSample) {
        SDKLogger_1.default.log("RegisteredApiBufferManagerWorker::offer");
        try {
            this.bufferMap.computeIfAbsent(key, new SimpleBuffer_1.default(this.getRegisteredApiBufferSize(key)));
            var buffer = this.bufferMap.getBuffer(key);
            if (!buffer) {
                return false;
            }
            return buffer.offer(apiSample);
        }
        catch (error) {
            SDKLogger_1.default.error("Error in offer: ".concat(error));
            return false;
        }
    };
    RegisteredApiBufferManagerWorker.prototype.canOffer = function (key) {
        SDKLogger_1.default.log("RegisteredApiBufferManagerWorker::canOffer");
        try {
            var config = this.getOperatingConfig();
            if (!(config === null || config === void 0 ? void 0 : config.getCaptureApiSample())) {
                return false;
            }
            var bufferSize = this.getRegisteredApiBufferSize(key);
            if (bufferSize === 0) {
                return false;
            }
            var buffer = this.bufferMap.getBuffer(key);
            if (this.semaphore.tryAcquire()) {
                var canOffer = buffer ? buffer.canOffer() : true;
                this.semaphore.release();
                return canOffer;
            }
            return false;
        }
        catch (error) {
            SDKLogger_1.default.error("Error in canOffer: ".concat(error));
            return false;
        }
    };
    RegisteredApiBufferManagerWorker.prototype.getRegisteredApiBufferSize = function (apiBufferKey) {
        var e_1, _a;
        SDKLogger_1.default.log("RegisteredApiBufferManagerWorker::getRegisteredApiBufferSize");
        var agentConfig = this.getOperatingConfig();
        if (!agentConfig || !agentConfig.getRegisteredApiConfigs() || !agentConfig.getRegisteredApiConfigs().length) {
            return 0;
        }
        try {
            for (var _b = __values(agentConfig.getRegisteredApiConfigs()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var apiConfig = _c.value;
                if (apiConfig.getMethod() === apiBufferKey.getMethod() && apiConfig.getUri().equals(apiBufferKey.getUri())) {
                    return apiConfig.getBufferSize();
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return 0;
    };
    RegisteredApiBufferManagerWorker.prototype.getRegisteredApiCountToCapture = function () {
        var e_2, _a;
        SDKLogger_1.default.log("RegisteredApiBufferManagerWorker::getRegisteredApiCountToCapture");
        var agentConfig = this.getOperatingConfig();
        if (!agentConfig || !agentConfig.getRegisteredApiConfigs() || agentConfig.getRegisteredApiConfigs().length === 0) {
            return 0;
        }
        var totalApis = 0;
        try {
            for (var _b = __values(agentConfig.getRegisteredApiConfigs()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var apiConfig = _c.value;
                if (apiConfig.getBufferSize()) {
                    totalApis += apiConfig.getBufferSize();
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return totalApis;
    };
    RegisteredApiBufferManagerWorker.prototype.syncForKey = function (key) {
        SDKLogger_1.default.log("RegisteredApiBufferManagerWorker::syncForKey");
        try {
            var buffer = this.bufferMap.getBuffer(key);
            if (!buffer) {
                return;
            }
            var iterations = buffer.getContentCount();
            if (iterations === 0) {
                return;
            }
            while (iterations-- > 0) {
                var apiSample = buffer.poll();
                if (!apiSample) {
                    break;
                }
                var payload = {
                    apiSamples: [__assign(__assign({}, apiSample), { uri: { uriPath: apiSample.getRawUri(), hasPathVariable: false } })],
                    apiOwner: {
                        env: AppConfig_1.default.getEnvironment(),
                        team: AppConfig_1.default.getTeamName(),
                        serviceName: AppConfig_1.default.getApplicationName(),
                    },
                };
                (0, RequestExecutor_1.postRequest)(this.ctUrl + this.getUri(), payload)
                    .then(function (data) {
                    SDKLogger_1.default.log("RegisteredApiBufferManagerWorker::syncForKey response ".concat(JSON.stringify(data)));
                })
                    .catch(function (error) {
                    SDKLogger_1.default.error("While sending registered api sample: ".concat(error));
                });
            }
        }
        catch (e) {
            SDKLogger_1.default.error("While syncing registered api sample: ".concat(e));
        }
    };
    return RegisteredApiBufferManagerWorker;
}(BufferManagerWorker_1.default));
exports.default = RegisteredApiBufferManagerWorker;
