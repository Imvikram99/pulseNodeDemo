"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ConsoleLogger = /** @class */ (function () {
    function ConsoleLogger() {
    }
    ConsoleLogger.prototype.log = function (message) {
        //console.log(message);
    };
    ConsoleLogger.prototype.error = function (message) {
        console.error(message);
    };
    ConsoleLogger.prototype.logF = function (message) {
        var supportingData = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            supportingData[_i - 1] = arguments[_i];
        }
        //console.log(message, supportingData);
    };
    ConsoleLogger.prototype.errorF = function (message) {
        var supportingData = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            supportingData[_i - 1] = arguments[_i];
        }
        console.error(message, supportingData);
    };
    return ConsoleLogger;
}());
var SDKLogger = /** @class */ (function () {
    function SDKLogger() {
    }
    SDKLogger.setLogger = function (logger) {
        this.logger = logger;
    };
    SDKLogger.log = function (message) {
        if (this.loggingEnabled && this.logLevel === "INFO") {
            var formattedMessage = "".concat(new Date(), " -ApiMonitorSDK Info: ").concat(message);
            this.logger.log(formattedMessage);
        }
    };
    SDKLogger.error = function (message) {
        if (this.loggingEnabled) {
            var formattedMessage = "".concat(new Date(), " -ApiMonitorSDK Error: ").concat(message);
            this.logger.error(formattedMessage);
        }
    };
    SDKLogger.logF = function (message) {
        var supportingData = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            supportingData[_i - 1] = arguments[_i];
        }
        if (this.loggingEnabled && this.logLevel === "INFO") {
            var formattedMessage = "".concat(new Date(), " -ApiMonitorSDK Info: ").concat(message);
            this.logger.logF(formattedMessage, supportingData);
        }
    };
    SDKLogger.errorF = function (message) {
        var supportingData = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            supportingData[_i - 1] = arguments[_i];
        }
        if (this.loggingEnabled) {
            var formattedMessage = "".concat(new Date(), " -ApiMonitorSDK Error: ").concat(message);
            this.logger.errorF(formattedMessage, supportingData);
        }
    };
    SDKLogger.logger = new ConsoleLogger();
    SDKLogger.loggingEnabled = false;
    SDKLogger.logLevel = "ERROR";
    return SDKLogger;
}());
exports.default = SDKLogger;
